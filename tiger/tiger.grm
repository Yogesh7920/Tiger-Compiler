%%

%name Tiger
%eop EOF
%verbose
%pure
%noshift EOF
%pos int

%term NIL
    | INT of int
    | STR of string
    | ID of string
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EQ
    | NEQ
    | GT
    | LT
    | GTE
    | LTE
    | AND
    | OR
    | COMMA
    | COLON
    | DOT
    | ASSIGN
    | EOF
    | SEMICOLON
    | LPARAN
    | RPARAN
    | LBRACK
    | RBRACK
    | LCURLY
    | RCURLY
    | VAR 
    | TYPE
    | ARRAY
    | OF
    | IF
    | THEN
    | ELSE
    | FOR
    | TO
    | DO 
    | WHILE
    | BREAK
    | LET 
    | IN 
    | END
    | FUNCTION 
    | CLASS 
    | NEW
    | METHOD
    | PRIMITIVE
    | IMPORT
    | NEWLINE

%nonterm  PROG of Tiger.Prog
        | EXP of Tiger.Exp
        | EXPS of Tiger.Exp list
        | DEC of Tiger.Dec
        | DECS of Tiger.Dec list
        | LVALUE of Tiger.Lvalue
        | CLASSFIELD of Tiger.Classfield
        | CLASSFIELDS of Tiger.Classfield list
        | TY of Tiger.Ty
        | TYFIELD of {ID: Tiger.id, Type: Tiger.typeid}
        | TYFIELDS of Tiger.tyfields 
        | ARGS of Tiger.Exp list
        | RECORDFIELD of {Key: Tiger.id, Val: Tiger.Exp}
        | RECORDFIELDS of {Key: Tiger.id, Val: Tiger.Exp} list

%keyword ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF BREAK NIL FUNCTION VAR TYPE PRIMITIVE CLASS METHOD NEW
%start PROG

%nonassoc DO OF FUNCTION TYPE TO
%nonassoc ASSIGN
%right THEN ELSE
%right ID LBRACK RBRACK

%left OR
%left AND
%nonassoc GTE LTE EQ NEQ LT GT
%left PLUS MINUS
%left MUL DIV

%%

PROG    : EXP       (Tiger.Expr EXP)
        | DECS      (Tiger.Decs DECS)

EXPS    : (* empty *)           ( []                  )
        | EXP                   ( [EXP]               )
        | EXP SEMICOLON EXPS    ( EXP :: EXPS         )

ARGS    : (* empty *)           ( []                  )
        | EXP COMMA ARGS        ( EXP :: ARGS         )

RECORDFIELD     : ID EQ EXP     ({Key=ID, Val=EXP})

RECORDFIELDS    : (* empty *)   ([])
                | RECORDFIELD   ([RECORDFIELD])
                | RECORDFIELD COMMA RECORDFIELDS (RECORDFIELD :: RECORDFIELDS)

DECS    : (* empty *)           ( []                  )
        | DEC DECS              ( DEC :: DECS         )

EXP     : NIL                   (Tiger.NIL)
        | INT                   (Tiger.Int INT)
        | STR                   (Tiger.Str STR)

        | ID LBRACK EXP RBRACK OF EXP   (Tiger.Array ({Type=ID, Len=EXP1, Val=EXP2}))
        | ID LCURLY RECORDFIELDS RCURLY (Tiger.Record ({Type=ID, Val=RECORDFIELDS}))
        | LPARAN EXP RPARAN     ( EXP )
        
        | EXP PLUS EXP          (Tiger.Oper (EXP1, Tiger.Plus, EXP2))
        | EXP MINUS EXP         (Tiger.Oper (EXP1, Tiger.Minus, EXP2))
        | EXP MUL EXP           (Tiger.Oper (EXP1, Tiger.Mul, EXP2))
        | EXP DIV EXP           (Tiger.Oper (EXP1, Tiger.Div, EXP2))
        | EXP EQ EXP            (Tiger.Oper (EXP1, Tiger.Eq, EXP2))
        | EXP NEQ EXP           (Tiger.Oper (EXP1, Tiger.Neq, EXP2))
        | EXP GT EXP            (Tiger.Oper (EXP1, Tiger.Gt, EXP2))
        | EXP LT EXP            (Tiger.Oper (EXP1, Tiger.Lt, EXP2))
        | EXP GTE EXP           (Tiger.Oper (EXP1, Tiger.Gte, EXP2))
        | EXP LTE EXP           (Tiger.Oper (EXP1, Tiger.Lte, EXP2))
        | EXP AND EXP           (Tiger.Oper (EXP1, Tiger.And, EXP2))
        | EXP OR EXP            (Tiger.Oper (EXP1, Tiger.Or, EXP2))

        | IF EXP THEN EXP           (Tiger.IfCond ({If=EXP1,Then=EXP2, Else=NONE}))
        | IF EXP THEN EXP ELSE EXP  (Tiger.IfCond ({If=EXP1,Then=EXP2, Else=SOME(EXP3)}))

        | WHILE EXP DO EXP                  (Tiger.While ({Cond=EXP1, Body=EXP2}))
        | FOR ID ASSIGN EXP TO EXP DO EXP   (Tiger.For ({Var=ID, From=EXP1, To=EXP2, Body=EXP3}))
        | BREAK                             (Tiger.Break)

        | LET DECS IN EXPS END                  (Tiger.LetExp ({Let=DECS, In=EXPS}))
        | ID LPARAN ARGS RPARAN                 (Tiger.FunctionCall({Name=ID, Args=ARGS}))

        | LVALUE    (Tiger.Lval LVALUE)
        | LVALUE DOT ID LPARAN ARGS RPARAN      (Tiger.MethodCall({Obj=LVALUE, Name=ID, Args=ARGS}))
        | NEW ID    (Tiger.New ID)
        | LVALUE ASSIGN EXP                     (Tiger.Assign(LVALUE, EXP))

LVALUE  : ID                        (Tiger.Var ID)
        | LVALUE DOT ID             (Tiger.Member (LVALUE, ID))
        | LVALUE LBRACK EXP RBRACK  (Tiger.Ref (LVALUE, EXP))

DEC     : TYPE ID EQ TY                                         (Tiger.TypeDec ({Name=ID, Type=TY}))
        | VAR ID ASSIGN EXP                                     (Tiger.VarDec({Name=ID, Type=NONE, Val=EXP}))
        | VAR ID COLON ID ASSIGN EXP                            (Tiger.VarDec({Name=ID1, Type=SOME(ID2), Val=EXP}))
        | FUNCTION ID LPARAN TYFIELDS RPARAN EQ EXP             (Tiger.FunDec({Name=ID, ArgTypes=TYFIELDS, Type=NONE, Val=EXP}))
        | FUNCTION ID LPARAN TYFIELDS RPARAN COLON ID EQ EXP    (Tiger.FunDec({Name=ID1, ArgTypes=TYFIELDS, Type=SOME(ID2), Val=EXP}))
        | CLASS ID LCURLY CLASSFIELDS RCURLY                    (Tiger.ClassDec({Name=ID, Extends=NONE, Fields=CLASSFIELDS}))

CLASSFIELDS     : (* empty *)                         ( [] )
                | CLASSFIELD SEMICOLON CLASSFIELDS    ( CLASSFIELD :: CLASSFIELDS         )

CLASSFIELD      : VAR ID ASSIGN EXP                             (Tiger.ClassVarDec({Name=ID, Type=NONE, Val=EXP}))
                | METHOD ID LPARAN TYFIELDS RPARAN ASSIGN EXP   (Tiger.ClassMethodDec({Name=ID, ArgTypes=TYFIELDS, Type=NONE, Val=EXP}))

TY      : ID                                    (Tiger.TypeAlias (ID))
        | LCURLY TYFIELDS RCURLY                (Tiger.RecordType (TYFIELDS))
        | ARRAY OF ID                           (Tiger.ArrayType (ID))
        | CLASS LCURLY CLASSFIELDS RCURLY       (Tiger.ClassType({Extends= NONE, Fields=CLASSFIELDS}))

TYFIELD : ID COLON ID                     ({ID=ID, Type=ID})

TYFIELDS        : (* empty *)                   ( []                  )
                | TYFIELD COMMA TYFIELDS        ( TYFIELD :: TYFIELDS         )

